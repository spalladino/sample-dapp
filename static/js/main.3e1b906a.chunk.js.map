{"version":3,"sources":["eth/network.js","components/Counter.js","contracts/Counter.js","App.js","serviceWorker.js","index.js"],"names":["web3","Counter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","optimistic","increasing","_this2","counter","contract","setState","error","methods","increase","send","on","_ref","initialValue","events","Increased","event","returnValues","newValue","_this3","_this4","_this$state","react_default","a","createElement","className","undefined","toString","options","address","disabled","onClick","increaseCounter","message","Component","getWeb3","Web3","givenProvider","hasProvider","getAccount","_getAccount","apply","arguments","_callee","accounts","regenerator_default","wrap","_context","prev","next","eth","getAccounts","sent","abrupt","stop","length","artifact","Artifacts","contracts","abi","JSON","parse","data","bin","Contract","objectSpread","getDeployed","_getDeployed","from","process","App","src_components_Counter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e1b906a.chunk.js","sourcesContent":["import Web3 from 'web3';\n\nlet web3;\n\nexport function getWeb3() {\n  if (!web3) {\n    web3 = new Web3(Web3.givenProvider);\n  }\n  return web3;\n}\n\nexport function hasProvider() {\n  return !!Web3.givenProvider;\n}\n\nexport async function getAccount() {\n  const web3 = getWeb3();\n  const accounts = await web3.eth.getAccounts();\n  return accounts[0];\n}","import React, { Component } from 'react';\nimport './Counter.css';\n\nclass Counter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      value: null, \n      optimistic: false,\n      increasing: false\n    };\n  }\n\n  increaseCounter() {\n    const counter  = this.props.contract;\n    this.setState({ increasing: true, error: null });\n    \n    return counter.methods.increase().send()\n      .on('transactionHash', () => {\n        this.setState(({ value }) => ({ value: (+value) + 1, optimistic: true }))\n      })\n      .on('receipt', () => {\n        this.setState({ increasing: false, optimistic: false })\n      })\n      .on('error', (error) => {\n        this.setState({ increasing: false, error })\n      });\n  }\n\n  async componentDidMount() {\n    const counter = this.props.contract;\n      \n    const initialValue = await counter.methods.value().call();\n    this.setState({ value: initialValue });\n\n    counter.events.Increased()\n      .on('data', (event) => {\n        const value = event.returnValues.newValue;\n        this.setState({ value });\n      });\n  }\n\n  render() {\n    const { value, increasing, error, optimistic } = this.state;\n    const { contract } = this.props;\n    if (!value) return \"Loading\";\n\n    return (\n      <div className=\"Counter\">\n        <div className={optimistic ? \"Counter-unconfirmed\" : undefined}>\n          Counter value: { value.toString() }\n        </div>\n        <div className=\"Counter-address\">Address: { contract.options.address }</div>\n        <button disabled={!!increasing} onClick={() => this.increaseCounter()}>\n          Increase counter\n        </button>\n        <div className=\"Counter-notifications\">\n          <div>{ increasing && \"Awaiting transaction\" }</div>\n          <div>{ error && error.message }</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Counter;","import Artifacts from './Artifacts.json';\nimport { getWeb3, getAccount } from '../eth/network.js';\n\nexport default function Counter(web3, address = null, options = {}) {\n  const artifact = Artifacts.contracts[\"contracts/Counter.sol:Counter\"];\n  const abi = JSON.parse(artifact.abi);\n  const data = '0x' + artifact.bin;\n  return new web3.eth.Contract(abi, address, { data, ...options });\n}\n\nexport async function getDeployed() {\n  const web3 = getWeb3();\n  const from = await getAccount();\n  const address = process.env.REACT_APP_COUNTER_ADDRESS;\n  return Counter(web3, address, { from });\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Counter from './components/Counter';\nimport { getDeployed } from './contracts/Counter';\nimport { hasProvider } from './eth/network';\n\nclass App extends Component {\n  state = {\n    counter: null\n  }\n\n  async componentDidMount() {\n    if (hasProvider()) {\n      const counter = await getDeployed();\n      this.setState({ counter });\n    }\n  }\n\n  render() {\n    const { counter } = this.state;\n\n    return (\n      <div className=\"App\">\n        { (hasProvider() && counter) \n          ? <Counter contract={counter} />\n          : <div>Please enable Metamask and reload</div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}